name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  # === Lint & Test (для всех веток) ===
  lint-test:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Run Checkstyle
        run: ./mvnw checkstyle:check -B

      - name: Run Tests
        run: ./mvnw test -B

      - name: SonarQube Analysis (only on dev)
        if: github.ref == 'refs/heads/dev'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          
          ./mvnw sonar:sonar \
            -Dsonar.projectKey=SoulsArchitecht_AccountsManager \
            -Dsonar.organization=soulsarchitecht \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.branch.name=${BRANCH_NAME} \
            -Dsonar.java.coveragePlugin=jacoco \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -B

  # === Deploy to Production (only on main, after approval) ===
  deploy-prod:
    runs-on: ubuntu-latest
    needs: lint-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/deploy/accounts-manager
            git pull origin main
            sudo docker-compose down
            sudo docker-compose up -d --build
            echo "Deployment to production completed!"